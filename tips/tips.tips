你知道吗？simbot的早期版本是没有核心与组件之分的。
你知道吗？simbot开发团队中修改bug最多的人与年龄最大的人是同一个人。
你知道吗？simbot开发团队中年龄最小的人与个头最高的人是同一个人。
你知道吗？simbot开发团队与catCode开发团队的关系非常好，经常会一起玩玩游戏摸摸鱼。
你知道吗？CatCode的logo是由simbot开发团队的成员所绘制的。
你知道吗？simbot的logo是由CatCode开发团队的成员所绘制的。感谢他们！
你知道吗？你不知道。
你知道吗？你知道的。
你知道吗？如果你读到了这条tips，那么就相当于没有读到tips。
你知道一共有多少个启动logo吗？
你知道一共有多少条tips吗？
实际上，每一次大版本更新，都相当于发布了一个新的框架。例如由1.x到2.x，2.x到3.x。
MessageGet中的text仅仅只是消息中的“文本”消息。完整消息在msgContent中。
simbot2.x的github地址是https://github.com/ForteScarlet/simpler-robot
simbot2.x中极大的利用了依赖注入的自动装配功能，这有效的改善了1.x中出现的强耦合的情况。
simbot2.x中减少了第三方依赖的数量，同时增加了simbot依赖模块的数量。
simbot2.x中的flag的设计是为了使得同一个类型的接口能够拥有可区分的职责，但是这个设计是失败的。
simbot的整体架构是编绘于脑海中并不断发生着变动的。
注意保护颈椎，多站起来活动活动是个不错的选择。
记得多喝水。
站起来活动一下吧。
看看远处的风景。
做一下眼保健操。
善用@FilterValue可以简化你的代码与逻辑。
不要忘记为猫猫码点亮一颗星星哦！猫猫码：https://github.com/ForteScarlet/CatCode
不要忘记为simpler-robot点亮一颗星星哦！simpler-robot：https://github.com/ForteScarlet/simpler-robot
在mirai组件中，发送消息使用MessageContent比使用CAT码更高效。
在监听函数之外，你可以使用BotManager来得到每个Bot，以及进而得到它们的送信器。
不要老是想着springboot, simple-robot也有依赖注入和自动装配机制。
你可以用ListenerContext来实现Listener之间的信息传递，或者会话传递。
你可以在启动类上实现SimbotProcess接口来实现参与启动前与启动后的部分操作。
你可以通过 AtDetectionRegistrar.registryAtDetection 来注册一个属于自己的AT匹配器。
你可以通过 ListenerFilterRegistrar.registerFilter 或者注入一个自定义的ListenerFilter（记得@Beans要指定名称）来注册一个自定义过滤器。
善用@Filter的target可以让你拥有更灵活的过滤规则。
simbot的第一次提交是2019年三月。
simbot2.x的第一次提交是2020年七月。
simbot3.x的第一次提交时2021年九月三十日。
如果你有一个基于simbot的优秀项目，欢迎通过github issue进行展示申请，来将你酷酷的项目进行展示。
你是否仍保有梦想？
你是否仍留存希望？
做一个宽容待人的人。
不一定要接受，但要学会宽容与理解。
放下自卑，收起高傲。
讽刺，永远不是什么幽默。
「当你为错过太阳而哭泣的时候，你也要再错过群星了。」
「我们热爱这个世界时，才真正活在这个世界上。」
「即使翅膀折了，心也要飞翔。」
「你可以从外表的美来评论一朵花或一只蝴蝶，但你不能这样来评论一个人。」
「我们把世界看错了，反说它欺骗我们。」
「不要着急，最好的总会在最不经意的时候出现。」
「杯中的水是亮闪闪的，海里的水是黑沉沉的。小道理可用文字说清楚，大道理却只有伟大的沉默。」
沉默不代表失败，相反，它往往宣誓胜利。
「相信，即使它给你带来悲哀也要相信。」
不要被他人影响到你的信念。
争论得不到真理，更得不到胜利。
「真理之川从他的错误之沟渠中流过。」
「小人得志，定难长久。德不配位，必有余殃。」
「真理是严酷的,我喜爱这个严酷,它永不欺骗。」
「花朵以芬芳熏香了空气，但它的最终任务，是把自己献给你。」